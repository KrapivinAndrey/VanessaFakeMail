{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПортЯщика(Парам01)"",""ПортЯщика"",""Допустим порт ящика '1080'"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""АдресЯщика(Парам01)"",""АдресЯщика"",""Допустим адрес ящика '0.0.0.0'"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПериодОпросаПочтыСек(Парам01)"",""ПериодОпросаПочтыСек"",""Допустим период опроса почты '1' сек"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ОчищаемЯщикОтПисем()"",""ОчищаемЯщикОтПисем"",""Тогда очищаем ящик от писем"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВЯщикеЕстьПисьма()"",""ВЯщикеЕстьПисьма"",""Тогда в ящике есть письма"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВЯщикеЕстьНовыеПисьма()"",""ВЯщикеЕстьНовыеПисьма"",""Тогда в ящике есть новые письма"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВЯщикеЕстьПисьмаСТемой(Парам01)"",""ВЯщикеЕстьПисьмаСТемой"",""Тогда в ящике есть письма с темой """"Тема"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВЯщикеЕстьПисьмаСТекстом(Парам01)"",""ВЯщикеЕстьПисьмаСТекстом"",""Тогда в ящике есть письма с текстом """"Текст"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВЯщикеЕстьПисьмаОт(Парам01)"",""ВЯщикеЕстьПисьмаОт"",""Тогда в ящике есть письма от """"Отправитель"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВЯщикеЕстьПисьмаДля(Парам01)"",""ВЯщикеЕстьПисьмаДля"",""Тогда в ящике есть письма для """"Получатель"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ТемойПисьма(Парам01)"",""ТемойПисьма"",""И темой письма """"Тема"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ТекстомПисьма(Парам01)"",""ТекстомПисьма"",""И текстом письма """"Текст"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПисьмаОт(Парам01)"",""ПисьмаОт"",""И письма от """"Отправитель"""""","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПисьмаДля(Парам01)"",""ПисьмаДля"",""И письма для """"Получатель"""""","""","""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти



#Область Вспомогательные_процедуры

&НаКлиенте
Процедура ИнициализироватьПараметрыFakeMail()

	Если НЕ КонтекстСохраняемый.Свойство(""FakeMail"") Тогда
		ТиповаяСтруктураНастроек = Новый Структура;
		ТиповаяСтруктураНастроек.Вставить(""Address"",	""localhost"");
		ТиповаяСтруктураНастроек.Вставить(""Port"",		1080);
		ТиповаяСтруктураНастроек.Вставить(""Timeout"",	5);
		
		КонтекстСохраняемый.Вставить(""FakeMail"", ТиповаяСтруктураНастроек);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодключениеКЯщику()
	Если НЕ Контекст.Свойство(""СоединениеFakeMail"") Тогда
		
		HTTPСоед = Новый HTTPСоединение(ПолучитьАдресЯщика(),
										ПолучитьПортЯщика());
									
		Контекст.Вставить(""СоединениеFakeMail"", HTTPСоед);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПисьма(ОтКого = """", ДляКого = """", СДаты = Неопределено, ПоДату = Неопределено)
	ИнициализироватьПараметрыFakeMail();
	НастроитьПодключениеКЯщику();
	
	АдресЗапроса = ""/api/emails"";
	Разделитель = ""?"";
	
	Если ЗначениеЗаполнено(ОтКого) Тогда
		АдресЗапроса	= АдресЗапроса + Разделитель + ""from=""	+ ОтКого;
		Разделитель		= ""&"";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДляКого) Тогда
		АдресЗапроса	= АдресЗапроса + Разделитель + ""to=""	+ ДляКого;
		Разделитель		= ""&"";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СДаты) Тогда
		АдресЗапроса	= АдресЗапроса + Разделитель + ""since=""	+ Формат(СДаты, ""ДФ=yyyy-MM-ddTHH:mm:ssZ"");
		Разделитель		= ""&"";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоДату) Тогда
		АдресЗапроса	= АдресЗапроса + Разделитель + ""until=""	+ Формат(ПоДату, ""ДФ=yyyy-MM-ddTHH:mm:ssZ"");
		Разделитель		= ""&"";
	КонецЕсли;	
	
	ReqGet = Новый HTTPЗапрос(АдресЗапроса);
	HTTPРезультат = Контекст.СоединениеFakeMail.Получить(ReqGet);

	
	Возврат HTTPРезультат;
КонецФункции

&НаКлиенте
Процедура ВалидироватьРезультатЗапросаПисем(HTTPРезультат)
	Ванесса.ПроверитьРавенство(HTTPРезультат.КодСостояния, 200);
	
	ТекстОтвета = HTTPРезультат.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
	Результат	= ПрочитатьJSON(ЧтениеJSON, Истина, ""date"", ФорматДатыJSON.ISO);
	
	Ванесса.ПроверитьТип(Результат, Тип(""Массив""));
	Ванесса.ПроверитьБольше(Результат.Количество(), 0, ""В ящике должны быть письма"");
	
	Контекст.Вставить(""FakeEmails"", Результат);
КонецПроцедуры

&НаКлиенте
Процедура ОтфильтроватьПисьмаПоПолю(Поле, Значение)
	Письма = Контекст.FakeEmails;
	
	Сч = 0;
	Пока Сч < Письма.Количество() Цикл
		Письмо = Письма.Получить(Сч);
		
		Если СтрНайти(Письмо[Поле], Значение) = 0 Тогда
			Письма.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтфильтроватьПисьмаПоПолюОт(Отправитель)
	Письма = Контекст.FakeEmails;
	
	Сч = 0;
	Пока Сч < Письма.Количество() Цикл
		Письмо = Письма.Получить(Сч);
		
		КорректныйОтправитель = Ложь;
		
		СписокОтправитлей = Письмо[""from""][""value""];
		Для Каждого ОтправительПиьсма из СписокОтправитлей Цикл
			
			Если СтрНайти(ОтправительПиьсма[""address""], Отправитель) <> 0 Тогда
				
				КорректныйОтправитель = Истина;
				Прервать;
				
			КонецЕсли;	
				
		КонецЦикла;
		
		Если Не КорректныйОтправитель Тогда
			Письма.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтфильтроватьПисьмаПоПолюКому(Получатель)
	Письма = Контекст.FakeEmails;
	
	Сч = 0;
	Пока Сч < Письма.Количество() Цикл
		Письмо = Письма.Получить(Сч);
		
		КорректныйПолучатель = Ложь;
		
		СписокПолучателей = Письмо[""to""][""value""];
		Для Каждого ПолучательПиьсма из СписокПолучателей Цикл
			
			Если СтрНайти(ПолучательПиьсма[""address""], Получатель) <> 0 Тогда
				
				КорректныйПолучатель = Истина;
				Прервать;
				
			КонецЕсли;	
				
		КонецЦикла;
		
		Если Не КорректныйПолучатель Тогда
			Письма.Удалить(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Получение_настроек

&НаКлиенте
Функция ПолучитьАдресЯщика()
	Возврат КонтекстСохраняемый.FakeMail.Address;
КонецФункции

&НаКлиенте
Функция ПолучитьПортЯщика()
	Возврат КонтекстСохраняемый.FakeMail.Port;
КонецФункции

&НаКлиенте
Функция ПолучитьТаймАут()
	Возврат КонтекстСохраняемый.FakeMail.Timeout;
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим порт ящика '1080'
//@ПортЯщика(Парам01)
Процедура ПортЯщика(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	ИнициализироватьПараметрыFakeMail();
	КонтекстСохраняемый.FakeMail.Port = Число(Парам01);
КонецПроцедуры

&НаКлиенте
//Допустим адрес ящика '0.0.0.0'
//@АдресЯщика(Парам01)
Процедура АдресЯщика(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	ИнициализироватьПараметрыFakeMail();
	КонтекстСохраняемый.FakeMail.Address = Парам01;
КонецПроцедуры

&НаКлиенте
//Допустим период опроса почты '1' сек
//@ПериодОпросаПочтыСек(Парам01)
Процедура ПериодОпросаПочтыСек(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	КонтекстСохраняемый.FakeMail.Timeout = Число(Парам01);
КонецПроцедуры

&НаКлиенте
//Тогда очищаем ящик от писем
//@ОчищаемЯщикОтПисем()
Процедура ОчищаемЯщикОтПисем() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	ИнициализироватьПараметрыFakeMail();
	НастроитьПодключениеКЯщику();
	
	ReqDel = Новый HTTPЗапрос(""/api/emails"");
	HTTPРезультат = Контекст.СоединениеFakeMail.Удалить(ReqDel);
	Ванесса.ПроверитьРавенство(HTTPРезультат.КодСостояния, 200);
КонецПроцедуры

&НаКлиенте
//Тогда в ящике есть письма
//@ВЯщикеЕстьПисьма()
Процедура ВЯщикеЕстьПисьма() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	HTTPРезультат = ПолучитьПисьма();
	
	ВалидироватьРезультатЗапросаПисем(HTTPРезультат);
КонецПроцедуры

&НаКлиенте
//Тогда в ящике есть новые письма
//@ВЯщикеЕстьНовыеПисьма()
Процедура ВЯщикеЕстьНовыеПисьма() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	ИнициализироватьПараметрыFakeMail();
	
	ТекДата = УниверсальноеВремя(ТекущаяДата());
	Начало	= ТекДата - ПолучитьТаймАут();
	Конец	= ТекДата + ПолучитьТаймАут(); 
	
	HTTPРезультат = ПолучитьПисьма(,,Начало, Конец);
	ВалидироватьРезультатЗапросаПисем(HTTPРезультат);
КонецПроцедуры

&НаКлиенте
//Тогда в ящике есть письма с темой ""Тема""
//@ВЯщикеЕстьПисьмаСТемой(Парам01)
Процедура ВЯщикеЕстьПисьмаСТемой(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	HTTPРезультат = ПолучитьПисьма();	
	ВалидироватьРезультатЗапросаПисем(HTTPРезультат);
	
	ОтфильтроватьПисьмаПоПолю(""subject"", Парам01);
	Ванесса.ПроверитьБольше(Контекст.FakeEMails, 0);
КонецПроцедуры

&НаКлиенте
//Тогда в ящике есть письма с текстом ""Текст""
//@ВЯщикеЕстьПисьмаСТекстом(Парам01)
Процедура ВЯщикеЕстьПисьмаСТекстом(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	HTTPРезультат = ПолучитьПисьма();	
	ВалидироватьРезультатЗапросаПисем(HTTPРезультат);
	
	ОтфильтроватьПисьмаПоПолю(""text"", Парам01);
	Ванесса.ПроверитьБольше(Контекст.FakeEMails, 0);
КонецПроцедуры

&НаКлиенте
//Тогда в ящике есть письма от ""Отправитель""
//@ВЯщикеЕстьПисьмаОт(Парам01)
Процедура ВЯщикеЕстьПисьмаОт(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	HTTPРезультат = ПолучитьПисьма(Парам01);
	ВалидироватьРезультатЗапросаПисем(HTTPРезультат);

КонецПроцедуры

&НаКлиенте
//Тогда в ящике есть письма для ""Получатель""
//@ВЯщикеЕстьПисьмаДля(Парам01)
Процедура ВЯщикеЕстьПисьмаДля(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	HTTPРезультат = ПолучитьПисьма(,Парам01);
	ВалидироватьРезультатЗапросаПисем(HTTPРезультат);

КонецПроцедуры

&НаКлиенте
//И темой письма ""Тема""
//@ТемойПисьма(Парам01)
Процедура ТемойПисьма(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	ОтфильтроватьПисьмаПоПолю(""subject"", Парам01);
	Ванесса.ПроверитьБольше(Контекст.FakeEMails.Количество(), 0);

КонецПроцедуры

&НаКлиенте
//И текстом письма ""Текст""
//@ТекстомПисьма(Парам01)
Процедура ТекстомПисьма(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	ОтфильтроватьПисьмаПоПолю(""text"", Парам01);
	Ванесса.ПроверитьБольше(Контекст.FakeEMails.Количество(), 0);

КонецПроцедуры

&НаКлиенте
//И письма от ""Отправитель""
//@ПисьмаОт(Парам01)
Процедура ПисьмаОт(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	ОтфильтроватьПисьмаПоПолюОт(Парам01);
	Ванесса.ПроверитьБольше(Контекст.FakeEMails.Количество(), 0);

КонецПроцедуры

&НаКлиенте
//И письма для ""Получатель""
//@ПисьмаДля(Парам01)
Процедура ПисьмаДля(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	
	ОтфильтроватьПисьмаПоПолюКому(Парам01);
	Ванесса.ПроверитьБольше(Контекст.FakeEMails.Количество(), 0);

КонецПроцедуры
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}